#!/usr/bin/env bash
# Setup Script for Subdomain Enumeration Toolkit
# Author: @atulxerma (improved)
set -euo pipefail

GREEN="\033[0;32m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
RESET="\033[0m"

echo -e "${GREEN}[+] STARTING SETUP${RESET}"

# Minimal system dependencies
echo -e "${YELLOW}[*] Updating package lists and installing base packages...${RESET}"
sudo apt update -y
sudo apt install -y golang jq curl git build-essential ca-certificates

# Verify Go presence
if ! command -v go &>/dev/null; then
  echo -e "${RED}[!] go binary not found after apt install. Aborting.${RESET}"
  exit 1
fi

echo -e "${GREEN}[✓] go found:${RESET} $(go version)"

# Gather GOBIN/GOPATH info and ensure bin dir exists
GOBIN="$(go env GOBIN 2>/dev/null || true)"
GOPATH="$(go env GOPATH 2>/dev/null || true)"
if [ -z "$GOBIN" ] || [ "$GOBIN" = "<no value>" ]; then
  if [ -n "$GOPATH" ] && [ "$GOPATH" != "<no value>" ]; then
    GOBIN="${GOPATH}/bin"
  else
    GOBIN="$HOME/go/bin"
  fi
fi
mkdir -p "$GOBIN"

echo -e "${YELLOW}[*] go will place binaries in:${RESET} $GOBIN"

# Helper function to install a go module and move binary to /usr/local/bin
install_go_tool() {
  local module_path="$1"
  local bin_name="$2"

  # If binary already in PATH and executable, skip
  if command -v "$bin_name" &>/dev/null; then
    echo -e "${GREEN}[✓] $bin_name already installed at $(command -v $bin_name)${RESET}"
    return 0
  fi

  echo -e "${YELLOW}[*] Installing $bin_name from $module_path ...${RESET}"
  # Use GOFLAGS to be safe with modules
  if ! GOFLAGS=-mod=mod go install "$module_path"; then
    echo -e "${RED}[!] go install failed for $module_path${RESET}"
    return 1
  fi

  # Expected location
  if [ -f "$GOBIN/$bin_name" ]; then
    echo -e "${YELLOW}[*] Copying $bin_name to /usr/local/bin ...${RESET}"
    sudo cp "$GOBIN/$bin_name" /usr/local/bin/"$bin_name"
    sudo chmod +x /usr/local/bin/"$bin_name"
    echo -e "${GREEN}[✓] $bin_name installed to /usr/local/bin${RESET}"
  else
    # Try find in home/go/bin as fallback
    if [ -f "$HOME/go/bin/$bin_name" ]; then
      sudo cp "$HOME/go/bin/$bin_name" /usr/local/bin/"$bin_name"
      sudo chmod +x /usr/local/bin/"$bin_name"
      echo -e "${GREEN}[✓] $bin_name installed to /usr/local/bin (from $HOME/go/bin)${RESET}"
    else
      echo -e "${RED}[!] Could not find $bin_name in $GOBIN or $HOME/go/bin after go install.${RESET}"
      return 1
    fi
  fi
}

# Install amass (apt is reliable)
if ! command -v amass &>/dev/null; then
  echo -e "${YELLOW}[*] Installing amass via apt...${RESET}"
  sudo apt install -y amass
else
  echo -e "${GREEN}[✓] amass already installed${RESET}"
fi

# Install subfinder (v2 path)
install_go_tool "github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest" "subfinder"

# Install assetfinder
install_go_tool "github.com/tomnomnom/assetfinder@latest" "assetfinder"

# Install httpx - using the path that works for your environment
# Some setups accept github.com/projectdiscovery/httpx/cmd/httpx@latest
# ProjectDiscovery may also expose a v2 path; both are attempted if needed.
if ! command -v httpx &>/dev/null; then
  echo -e "${YELLOW}[*] Attempting to install httpx (try canonical path)...${RESET}"
  if ! install_go_tool "github.com/projectdiscovery/httpx/cmd/httpx@latest" "httpx"; then
    # fallback to v2 path if canonical fails
    echo -e "${YELLOW}[*] Fallback: trying httpx v2 module path...${RESET}"
    install_go_tool "github.com/projectdiscovery/httpx/v2/cmd/httpx@latest" "httpx" || {
      echo -e "${RED}[!] Failed to install httpx via both paths. Please inspect go errors above.${RESET}"
      exit 1
    }
  fi
else
  echo -e "${GREEN}[✓] httpx already installed at $(command -v httpx)${RESET}"
fi

# Optional local tool "subtron"
if [ -f "./subtron" ]; then
  echo -e "${YELLOW}[*] Installing local subtron binary...${RESET}"
  sudo cp ./subtron /usr/local/bin/subtron
  sudo chmod +x /usr/local/bin/subtron
  echo -e "${GREEN}[✓] subtron installed${RESET}"
fi

echo -e "${GREEN}[+] SETUP COMPLETE${RESET}"

# Sanity checks
echo -e "${YELLOW}[*] Sanity checks:${RESET}"
echo " which httpx: $(command -v httpx || echo 'not found')"
echo " httpx -version (or httpx -h output):"
if command -v httpx &>/dev/null; then
  httpx -version 2>/dev/null || httpx -h | head -n 2
else
  echo " httpx not installed or not in PATH"
fi

echo -e "${GREEN}[+] You should now be able to run your enumeration script.${RESET}"
